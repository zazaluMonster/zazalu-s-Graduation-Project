<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						   http://www.springframework.org/schema/beans/spring-beans.xsd
						   http://www.springframework.org/schema/context
						   http://www.springframework.org/schema/context/spring-context.xsd
						   http://www.springframework.org/schema/aop 
						   http://www.springframework.org/schema/aop/spring-aop.xsd
						   http://www.springframework.org/schema/tx
						   http://www.springframework.org/schema/tx/spring-tx.xsd">


	<context:component-scan base-package="com.zazalu.demo"></context:component-scan>
	<!--导入db.properties -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	<!--第一步，我们之前使用了HibernateTemplate来进行数据的CRUD操作，不过我们知道HibernateTemplate是依赖Session的 
		所以我们要先获取到Session。 而Session的获取我们又是根据SeissonFactory来获取的，而SessionFactory的获取之前我们要先加载Hibernate的配置文件 
		于是乎这整个步骤如果每次都由我们来写，就显得枯燥无味，所以Spring为我们提供了一个类LocalSessionFactoryBean，专门帮我们搞定了这件事情 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置 hibernate 配置文件的名称及位置 -->
		<property name="configLocations" value="classpath:hibernate.cfg.xml"></property>
		<!-- 配置 hibernate 映射文件的位置及名称 ， 可以使用通配符 -->
		<property name="mappingLocations" value="classpath:com/zazalu/entity/*.hbm.xml"></property>
	</bean>
	<!--随后我们便可以创建Hibernatetemplate了 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!--配置Dao -->
	<bean id="userDao" class="com.zazalu.dao.Impl.UserDaoImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>

	<bean id="goodDao" class="com.zazalu.dao.Impl.GoodDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="ordersDao" class="com.zazalu.dao.Impl.OrdersDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="favoriteDao" class="com.zazalu.dao.Impl.FavoriteDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

	<bean id="tagDao" class="com.zazalu.dao.Impl.TagDaoImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>

    <bean id="evaluateDao" class="com.zazalu.dao.Impl.EvaluateDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="advertisementDao" class="com.zazalu.dao.Impl.AdvertisementDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="addressDao" class="com.zazalu.dao.Impl.AddressDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

	<!--配置Service -->
	<bean id="userService" class="com.zazalu.service.Impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>

    <bean id="goodService" class="com.zazalu.service.Impl.GoodServiceImpl">
        <property name="goodDao" ref="goodDao"></property>
    </bean>

    <bean id="ordersService" class="com.zazalu.service.Impl.OrdersServiceImpl">
        <property name="ordersDao" ref="ordersDao"></property>
    </bean>

    <bean id="favoriteService" class="com.zazalu.service.Impl.FavoriteServiceImpl">
        <property name="favoriteDao" ref="favoriteDao"></property>
    </bean>

	<bean id="tagService" class="com.zazalu.service.Impl.TagServiceImpl">
		<property name="tagDao" ref="tagDao"></property>
	</bean>

    <bean id="evaluateService" class="com.zazalu.service.Impl.EvaluateServiceImpl">
        <property name="evaluateDao" ref="evaluateDao"></property>
    </bean>

    <bean id="advertisementService" class="com.zazalu.service.Impl.AdvertisementServiceImpl">
        <property name="advertisementDao" ref="advertisementDao"></property>
    </bean>

    <bean id="addressService" class="com.zazalu.service.Impl.AddressServiceImpl">
        <property name="addressDao" ref="addressDao"></property>
    </bean>

    <!--配置事务管理器-->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!--配置ActionBean  -->
	<bean id="userAction" class="com.zazalu.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>

    <bean id="userActionNoModelDriven" class="com.zazalu.action.UserActionNoModelDriven" scope="prototype">
        <property name="userService" ref="userService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="goodAction" class="com.zazalu.action.GoodAction" scope="prototype">
        <property name="goodService" ref="goodService"></property>
    </bean>

    <bean id="ordersAction" class="com.zazalu.action.OrdersAction" scope="prototype">
        <property name="ordersService" ref="ordersService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="favoriteAction" class="com.zazalu.action.FavoriteAction" scope="prototype">
        <property name="favoriteService" ref="favoriteService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

	<bean id="tagAction" class="com.zazalu.action.TagAction" scope="prototype">
		<property name="tagService" ref="tagService"></property>
	</bean>

    <bean id="evaluateAction" class="com.zazalu.action.EvaluateAction" scope="prototype">
        <property name="evaluateService" ref="evaluateService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="advertisementAction" class="com.zazalu.action.AdvertisementAction" scope="prototype">
        <property name="advertisementService" ref="advertisementService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>

    <bean id="addressAction" class="com.zazalu.action.AddressAction" scope="prototype">
        <property name="addressService" ref="addressService"></property>
        <property name="hibernateTemplate" ref="hibernateTemplate"></property>
    </bean>



    <!--配置事务具体详情-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="register" />
            <tx:method name="newOrder" />
            <tx:method name="addFavorite" />
            <tx:method name="addTag" />
            <tx:method name="addEvaluate" />
            <tx:method name="addAdvertisement" />
            <tx:method name="addAddress" />
            <tx:method name="*" />
		</tx:attributes>
	</tx:advice>

    <!--设置切入点和使用的通知-->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.zazalu.service..*.*(..))" />
	</aop:config>
</beans>